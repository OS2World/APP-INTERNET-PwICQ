/*
 * msg.c - Send Greetings message
 */

#ifdef __OS2__
 #pragma strings(readonly)
 #define INCL_DOSPROCESS
#endif

 #include <stdio.h>
 #include <string.h>
 #include <malloc.h>

 #include "peer.h"

 #pragma pack(1)



/*
WORD.L  xx xx   GCMD  The command in this packet. Valid values are:

0x0029 =  41 - file request
0x002d =  45 - chat request
0x0032 =  50 - file request granted/refused
0x003a =  58 - Send / Start ICQ Chat

16 ... ID Those 16 bytes seem to be fixed for different commands. Seen:

bf f7 20 b2 37 8e d4 11 bd 28 00 04 ac 96 d9 05 - chat request
f0 2d 12 d9 30 91 d3 11 8d d7 00 10 4b 06 46 2e - file request or file request granted/refused

WORD.L 00 00 EMPTY Unknown: empty.
DLStr xx xx xx xx ... TEXT 	"ICQ Chat" or
				"Send / Start ICQ Chat" for chat request,
				"File" for file request,
				"File Transfer" for file request grant/refusal.
				This text is displayed in the requester opened by Windows.
15 ... UNKNOWN Unknown. Seen:

00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 on chat/file requests,
00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 on grants/refusals.

DWORD.L xx xx xx xx LENGTH The length of the remaining data. No, this is not a TLV.
DLStr xx xx xx xx ... REASON The reason for the chat request/file request/file request gran/refusal.

WORD.B xx xx PORT The port to connect to in bigendian.
WORD.B xx xx PAD Empty or unknown, probably padding.
BSTR xx xx ... NAME The file name for the chat request/grant/refusal, empty for chat.
DWORD.L xx xx xx xx FILELEN The length of the file in bytes.
DWORD.L xx xx xx xx PORT2 Again the port, but as double word and in long endian. Missing for chat requests.

01/20/2003 21:58:49 icqkrnl    Received block (114 bytes)
02 93 f7 f1 f3 32 70 b7 97 16 88 b9 97 e3 77 b9   .ì˜ÒÛ2p∑ó.àπó„wπ
97 ee 77 b9 97 f2 77 a3 97 9b 77 b8 97 dd 77 b9   óÓwπóÚw£óõw∏ó›wπ
be 00 f0 2d 12 d9 30 91 d3 11 8d d7 00 10 4b 06   æ.-.Ÿ0ë”.ç◊..K.
46 2e 00 00 04 00 00 00 46 69 6c 65 00 00 01 00   F.......File....

00 01 00 00 00 00 00 00 00 00 00 23 00 00 00 05   ...........#....
00 00 00 74 65 73 74 65 a8 43 5c 01 0c 00 69 72   ...teste®C\...ir
65 61 6c 69 7a 65 2e 78 6d 00 c1 3b 2b 00 43 a8   ealize.xm.¡;+.C®
00 00                                             ..


*/

/*---[ Constants ]--------------------------------------------------------------------------------------------*/

/*---[ Implement ]--------------------------------------------------------------------------------------------*/

 int icqv8_sndGreet(HICQ icq, PEERSESSION *cfg, USHORT type, const char *title, int szTitle, const char *reason, int szReason, const char *fileName, int szFileName, ULONG fileSize)
 {
    static const char chatReq[]  = { 0xbf, 0xf7, 0x20, 0xb2, 0x37, 0x8e, 0xd4, 0x11, 0xbd, 0x28, 0x00, 0x04, 0xac, 0x96, 0xd9, 0x05 };
    static const char fileReq[]  = { 0xf0, 0x2d, 0x12, 0xd9, 0x30, 0x91, 0xd3, 0x11, 0x8d, 0xd7, 0x00, 0x10, 0x4b, 0x06, 0x46, 0x2e };

    static const char reqBlock[] = { 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static const char rspBlock[] = { 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    ULONG sz;

    struct _pkt
    {
       PEER_MSG_HEADER h;
       UCHAR           txt;
    } *pkt;
    
    char	    *ptr;
    const char  *src;
    int	        rc        = -1;
    int		    f;
    int             extraBlock = (type != MSG_GREET_REQ_CHAT) ? 4 : 0;
    USHORT          sValue;
    ULONG           lValue;
    
    if(szTitle < 0)
        szTitle = strlen(title);
    
    if(szReason < 0)
        szReason = strlen(reason);
    
    if(szFileName < 0)
        szFileName = strlen(fileName)+1;
    
    sz  = szTitle+szReason+szFileName+sizeof(PEER_MSG_HEADER)+62;

    pkt = malloc(sz+20);

    if(!pkt)
    {
       icqWriteSysLog(icq,PROJECT,"Memory allocation error when creating greeting packet");
       return -1;
    }
    
    CHKPoint();

    memset(pkt,0,sz);

    pkt->h.cmd      = 0x02;
    pkt->h.action   = 0x07ee;
    pkt->h.x1       = 0x0e;
    pkt->h.msgType  = MSG_GREET;
    pkt->h.sequence = cfg->sequence--;
    pkt->h.flags    = 0x0010;
    pkt->h.msgSize  = 1;

    src =
    ptr = icqCreateRequest(	icq,
    				TRUE,
    				(ULONG) cfg,
    				cfg->seqMasc|((ULONG) pkt->h.sequence),
    				&icqv8_peerDescriptor,
    				cfg,
    				szTitle+szReason+szFileName+12 );
    if(!ptr)
    {
       free(pkt);
       return -1;
    }    				

    *( (USHORT *) ptr) = type;
    ptr += 2;

    *( (ULONG *) ptr) =  fileSize;
    ptr += 4;
    
    strncpy(ptr,title,szTitle+1);
    *(ptr+szTitle+1) = 0;
    ptr += szTitle+1;

    strncpy(ptr,reason,szReason+1);
    *(ptr+szReason+1) = 0;
    ptr += szReason+1;

    strncpy(ptr,fileName,szFileName+1);
    *(ptr+szFileName+1) = 0;

    icqDumpPacket(icq, NULL, "Request created", szTitle+szReason+szFileName+12, (unsigned char *) src);

    ptr = (char *) (pkt+1);

    *( (USHORT *) ptr ) = type;
    ptr += 2;

    src = type == MSG_GREET_REQ_CHAT ? chatReq : fileReq;

    for(f=0;f<16;f++)
       *(ptr++) = *(src++);

    ptr += 2;

    *( (USHORT *) ptr) = szTitle;
    ptr += 4;

    strncpy(ptr,title,szTitle);
    ptr += szTitle;

    src = (type == MSG_GREET_REQ_CHAT || type ==  MSG_GREET_REQ_FILE) ? reqBlock : rspBlock;

    for(f=0;f<15;f++)
       *(ptr++) = *(src++);

    lValue = szReason + szFileName + 15 + extraBlock;

    *( (ULONG *) ptr ) = lValue;
    ptr += 4;

    *( (USHORT *) ptr) = szReason;
    ptr += 4;

    strncpy(ptr,reason,szReason);
    ptr += szReason;

    CHKPoint();

    sValue = icqv8_getPort(icq,cfg->peer);

    *( (USHORT *) ptr ) = SHORT_VALUE(sValue);
    ptr += 4;

    *( (USHORT *) ptr) = szFileName;
    ptr += 2;
    strncpy(ptr,fileName,szFileName);
    *(ptr+szFileName) = 0;

    ptr += szFileName;

    *( (ULONG *) ptr ) = fileSize;
    ptr += 4;

    CHKPoint();

    if(extraBlock)
    {
       *( (ULONG *) ptr ) = icqv8_getPort(icq,cfg->peer);
       ptr += 4;
    }



    DBGTrace( ((ULONG) ptr) - ((ULONG)pkt));
    DBGTrace(sz);
    icqDumpPacket(icq, NULL, "Greeting message", sz, (unsigned char *) pkt);

    ptr = (UCHAR *) pkt;
    icqv8_encript(ptr+1, sz-1);

    if(cfg->sock > 0)
       rc = icqv8_sendBlock(cfg->sock, sz, pkt);

    free(pkt);
    return rc;
 }



